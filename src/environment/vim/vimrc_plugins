" Vim Plugins Configuration (~/.vimrc_plugins)

" Type :so % to refresh .vimrc after making changes
" Type :PluginInstall to update

"### TODO ###

""" Plugins to evaluate
" Plug 'Valloric/YouCompleteMe'
" Plug 'junegunn/vim-easy-align'


" #### Plugin installation ####

if &compatible
  set nocompatible
end

call plug#begin('~/.vim/plugged')

Plug 'altercation/vim-colors-solarized' "Text colors for C++

Plug 'bling/vim-airline' "Status bar
Plug 'vim-airline/vim-airline-themes' "Status bar Themes

Plug 'christoomey/vim-tmux-navigator' "TMUX - Allow navigate among TMUX windows and vim
Plug 'christoomey/vim-tmux-runner' "TMUX - Allow run commands on TMUX

" Plug 'christoomey/vim-run-interactive' "Run command into an interative shell
" Plug 'ctrlpvim/ctrlp.vim' "Search filesystem with ctrl+p

"Problematic"
" Plug 'jiangmiao/auto-pairs' "MANY features, but mostly closes ([{' etc
" Plug 'vim-scripts/HTML-AutoCloseTag' "close tags after >

Plug 'tpope/vim-surround' "easily surround things...just read docs for info

Plug 'vim-scripts/tComment' "Comment easily with gcc

Plug 'tpope/vim-repeat' "allow plugins to utilize . command

Plug 'vim-scripts/matchit.zip' " % also matches HTML tags / words / etc

Plug 'duff/vim-scratch' "Open a throwaway scratch buffer

Plug 'rking/ag.vim' " Code Tagging and Navigation

Plug 'rhysd/vim-clang-format' "Format with Clang
" Plug 'osyo-manga/vim-marching' "Complete with Clang
"TODO(Roger) - Plug 'uplus/vim-clang-rename' "Renaming with Clang

"Ascyncronous execution library
Plug 'Shougo/vimproc' , {
  \ 'build' : {
      \     'windows' : 'tools\\update-dll-mingw',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make',
      \     'linux' : 'make',
      \     'unix' : 'gmake',
      \    },
      \ }

" TODO(Roger) - Verify what this plugin does.
Plug 'osyo-manga/vim-reunions'
" Plug 'osyo-manga/vim-snowdrop'

" Pull 'thinca/vim-quickrun'

Plug 'scrooloose/syntastic' "Syntax Highlighting
" Plug 'w0rp/ale' "Syntax Highlighting (Asynchronous)

Plug 'vim-scripts/DoxygenToolkit.vim' "Code Documentation

" Plug 'vim-scripts/Conque-GDB' "C++ debugging

Plug 'majutsushi/tagbar' "Display Tags in windows
" Plug 'xolox/vim-easytags' "Create Tags automatically
" Plug 'xolox/vim-misc' "Required by easytags
Plug 'szw/vim-tags' "Tags Creation

" Plug 'dhruvasagar/vim-prosession', {'depends': 'tpope/vim-obsession'} "Save VIM sessions
" Plug 'tpope/vim-obsession' "Required by vim-prosession

" React JS
Plug 'mxw/vim-jsx'
Plug 'maksimr/vim-jsbeautify'
" Plug 'neoclide/vim-jsx-improve'

" Pandoc
" Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'dhruvasagar/vim-table-mode'

" Markdown folding
Plug 'nelstrom/vim-markdown-folding'

"Marvim Macro Manager
Plug 'RogerioDosSantos/marvim'

"VimTextObjectUser -  Allow creation of text objects
Plug 'kana/vim-textobj-user'

"EditorConfig
Plug 'editorconfig/editorconfig-vim'

" FZF
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }    " Install fzf for user
Plug 'junegunn/fzf.vim'                                              " Fzf vim plugin

" Identation Lines
Plug 'Yggdroot/indentLine'

" Git / Github
Plug 'tpope/vim-fugitive' "Git wrapper
Plug 'airblade/vim-gitgutter' "Show changes on files

" Grammar checker
Plug 'rhysd/vim-grammarous'

" Python
" Plug 'davidhalter/jedi-vim'

" Intellisense (Auto-completion)
"" Core Auto Completion
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/asyncomplete.vim'
"" Vim Buffer
Plug 'prabirshrestha/asyncomplete-buffer.vim'
"" File Names and Directories
Plug 'prabirshrestha/asyncomplete-file.vim'
"" Includes
Plug 'Shougo/neoinclude.vim'
Plug 'kyouryuukunn/asyncomplete-neoinclude.vim'
"" Snippets
" Plug 'Shougo/neocomplete' "Complete with cache
Plug 'Shougo/neosnippet.vim' "Snipets
Plug 'RogerioDosSantos/neosnippet-snippets' "Snippets templates
Plug 'prabirshrestha/asyncomplete-neosnippet.vim'
"" TMUX (Words from other TMUX panes)
Plug 'wellle/tmux-complete.vim'
"" Tags 
Plug 'prabirshrestha/asyncomplete-tags.vim'
Plug 'ludovicchabant/vim-gutentags'
"" Language Server Protocol
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete-lsp.vim'

"Plugins to try

" "  Features
"   Plug 'w0rp/ale'                                                      " Async linting
"   Plug 'scrooloose/nerdtree'                                           " File tree browser
"   Plug 'Xuyuanp/nerdtree-git-plugin'                                   " Git for NerdTree
"   Plug 'jistr/vim-nerdtree-tabs'                                       " NerdTree independent of tabs
"   Plug 'jreybert/vimagit'                                              " Interactive git staging
"
"   " Small utilities
"   Plug 'bag-man/copypath.vim'                                          " copy path of file
"   Plug 'rbgrouleff/bclose.vim'                                         " Close current buffer
"   Plug 'can3p/incbool.vim'                                             " Toggle true/false
"   Plug 'kopischke/vim-fetch'                                           " Use line numbers in file paths
"   Plug 'matze/vim-move'                                                " Move lines up and down
"   Plug 'chilicuil/vim-sprunge'                                         " Paste selection to sprunge
"   Plug 'FooSoft/vim-argwrap'                                           " Wrap arguments to multi-lines
"   Plug 'szw/vim-g'                                                     " Google from Vim
"   Plug 'google/vim-searchindex'                                        " Number of search results
"
"   " Languages
"   Plug 'moll/vim-node'                                                 " Syntax for node.js
"   Plug 'wavded/vim-stylus'                                             " Stylus for stylus
"   Plug 'digitaltoad/vim-pug'                                           " Syntax for pug
"   Plug 'lervag/vimtex'                                                 " Build LaTeX files
"   Plug 'josudoey/vim-eslint-fix'                                       " Eslint fixamajig
"   Plug 'mattn/emmet-vim'                                               " HTML expand abreviation
"
"   " Snippets
"   Plug 'SirVer/ultisnips'                                              " Snippet engine
"   Plug 'isRuslan/vim-es6'                                              " ES6 snippets
"   Plug 'bag-man/snipmate-mocha'                                        " Snippets for Mocha tests
"
"   " tpope
"   Plug 'tpope/vim-surround'                                            " Operate on surrounding
"   Plug 'tpope/vim-speeddating'                                         " Increment dates
"   Plug 'tpope/vim-repeat'                                              " Repeat plugins
"   Plug 'tpope/vim-commentary'                                          " Comment out blocks
"   Plug 'tpope/vim-fugitive'                                            " Git integration
"   Plug 'tpope/vim-abolish'                                             " Flexible search
"   Plug 'tpope/vim-jdaddy'                                              " JSON text object
"   Plug 'tpope/vim-rhubarb'                                             " Github browse
"
"   " Appearance
"   Plug 'mkitt/tabline.vim'                                             " Cleaner tabs
"   Plug 'chrisbra/Colorizer'                                            " Show hex codes as colours
"   Plug 'kien/rainbow_parentheses.vim'                                  " Colour matched brackets
"   Plug 'suan/vim-instant-markdown'                                     " Markdown preview instant-markdown-d
"   Plug 'unblevable/quick-scope'                                        " Highlight jump characters
"
"   " Text objects
"   Plug 'wellle/targets.vim'                                            " Additional text objects
"   Plug 'michaeljsmith/vim-indent-object'                               " Indented text object
"   Plug 'kana/vim-textobj-user'                                         " Add additional text objects
"   Plug 'jceb/vim-textobj-uri'                                          " URL objects
"   Plug 'glts/vim-textobj-comment'                                      " Comment text objects
"   Plug 'kana/vim-textobj-function'                                     " Add function based text objects
"   Plug 'bag-man/vim-textobj-keyvalue'                                  " Key value object
"   Plug 'thinca/vim-textobj-function-javascript'                        " Add JS function object
"   Plug 'reedes/vim-textobj-sentence'                                   " Sentence object
"
"


call plug#end()


"#### Plugins Configurations ####

" Intellisense (Auto-Completion) ************************************************************8
"" Auto Complete Vim Buffer
call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
    \ 'name': 'buffer',
    \ 'whitelist': ['*'],
    \ 'blacklist': ['go'],
    \ 'completor': function('asyncomplete#sources#buffer#completor'),
    \ }))

"" Files and Directories
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
    \ 'name': 'file',
    \ 'whitelist': ['*'],
    \ 'priority': 10,
    \ 'completor': function('asyncomplete#sources#file#completor')
    \ }))

"" Includes
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#neoinclude#get_source_options({
    \ 'name': 'neoinclude',
    \ 'whitelist': ['cpp'],
    \ 'refresh_pattern': '\(<\|"\|/\)$',
    \ 'completor': function('asyncomplete#sources#neoinclude#completor'),
    \ }))

"" Snippets
call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
    \ 'name': 'neosnippet',
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
    \ }))

"" TMUX (Words from other TMUX panes)
let g:tmuxcomplete#asyncomplete_source_options = {
            \ 'name':      'tmuxcomplete',
            \ 'whitelist': ['*'],
            \ 'config': {
            \     'splitmode':      'words',
            \     'filter_prefix':   1,
            \     'show_incomplete': 1,
            \     'sort_candidates': 0,
            \     'scrollback':      0,
            \     'truncate':        0
            \     }
            \ }

"" Tags 
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#tags#get_source_options({
    \ 'name': 'tags',
    \ 'whitelist': ['c'],
    \ 'completor': function('asyncomplete#sources#tags#completor'),
    \ 'config': {
    \    'max_file_size': 50000000,
    \  },
    \ }))

"" Language Server Protocol
if executable('clangd')
    augroup lsp_clangd
        autocmd!
        autocmd User lsp_setup call lsp#register_server({
                    \ 'name': 'clangd',
                    \ 'cmd': {server_info->['clangd']},
                    \ 'priority': 11,
                    \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
                    \ })
        autocmd FileType c setlocal omnifunc=lsp#complete
        autocmd FileType cpp setlocal omnifunc=lsp#complete
        autocmd FileType objc setlocal omnifunc=lsp#complete
        autocmd FileType objcpp setlocal omnifunc=lsp#complete
    augroup end
endif
if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'priority': 11,
        \ 'whitelist': ['python'],
        \ })
endif
if executable('typescript-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
        \ 'whitelist': ['typescript'],
        \ 'priority': 11,
        \ })
endif


"************************************************************************************************************************

"Solarized (Configuration)
syntax enable "Turn on the vim syntax highlight
set t_Co=256 "Set the color supported to be 256. By default it is 16
colorscheme solarized "Define the solirized as the default color schema
" let g:airline_powerline_fonts = 1 " Allow powerline symbols to show up
let g:solarized_termcolors=256
set background=dark "Set the background to be black

" TMUX Navigator (Allow moving around between Tmux windows)
let g:tmux_navigator_no_mappings = 1
let g:tmux_navigator_save_on_switch = 1
nnoremap <silent><C-h> :TmuxNavigateLeft<cr>
nnoremap <silent><C-j> :TmuxNavigateDown<cr>
nnoremap <silent><C-k> :TmuxNavigateUp<cr>
nnoremap <silent><C-l> :TmuxNavigateRight<cr>

" TMUX Runner (Control from Vim)
nnoremap <silent><leader>to :VtrOpenRunner<cr>
nnoremap <silent><leader>te :VtrClearRunner<cr>
nnoremap <silent><leader>tk :VtrKillRunner<cr>
" nnoremap <silent><leader>td :VtrDetachRunner<cr>
" nnoremap <silent><leader>tc :VtrFlushCommand<cr>:VtrSendCommandToRunner<cr>
nnoremap <silent><leader>tb :up<cr>:VtrFlushCommand<cr>:VtrSendCommandToRunner ./build_linux_debug.sh<cr>
nnoremap <silent><leader>tl :VtrSendLinesToRunner<cr>
nnoremap <silent><leader>tf :VtrSendFile<cr>

" Ctrl-P

" (Use The Silver Searcher https://github.com/ggreer/the_silver_searcher)
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_working_path_mode = 'r'

  " ag is fast enough that CtrlP doesn't need to cache
  "let g:ctrlp_use_caching = 0
endif

" " NoeComplete (Completition configuration)
"
" let g:acp_enableAtStartup = 0 " Disable AutoComplPop.
" let g:neocomplete#enable_at_startup = 1 " Use neocomplete.
" let g:neocomplete#enable_smart_case = 1 " Use smartcase.
" let g:neocomplete#sources#syntax#min_keyword_length = 3 " Set minimum syntax keyword length.
" let g:neocomplete#lock_buffer_name_pattern = '\*ku\*' "Define buffer pattern
" let g:neocomplcache_temporary_dir = '$HOME/.vim/tmp/neocomplcache'
"
" " Define dictionary.
" let g:neocomplete#sources#dictionary#dictionaries = {
"   \ 'default' : '',
"     \ 'vimshell' : $HOME.'/.vimshell_hist',
"     \ 'scheme' : $HOME.'/.gosh_completions'
"   \ }
"
" " NoeComplete (Define keyword)
" if !exists('g:neocomplete#keyword_patterns')
"     let g:neocomplete#keyword_patterns = {}
" endif
"     let g:neocomplete#keyword_patterns['default'] = '\h\w*'
"
" " NeoComplete (Plugin key-mappings)
" inoremap <expr><C-g>     neocomplete#undo_completion()
" inoremap <expr><C-l>     neocomplete#complete_common_string()
"
" " NeoComplete (Recommended key-mappings)
" " <CR>: close popup and save indent.
" inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
" function! s:my_cr_function()
"   return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
" endfunction
"
" " NeoComplete (<TAB>: completion)
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" " NeoComplete (<C-h>, <BS>: close popup and delete backword char)
" inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
" inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
"
" " NeoComplete (Enable omni completion)
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" " autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"
" " NeoComplete (Enable heavy omni completion)
" if !exists('g:neocomplete#sources#omni#input_patterns')
"   let g:neocomplete#sources#omni#input_patterns = {}
" endif

" NeoSnippets (Configuration)

" NeoSnippets (Plugin key-mappings)
imap <C-]>     <Plug>(neosnippet_expand_or_jump)
smap <C-]>     <Plug>(neosnippet_expand_or_jump)
xmap <C-]>     <Plug>(neosnippet_expand_target)

" NeoSnippets (SuperTab like snippets behavior)
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" NeoSnippets (For conceal markers)
if has('conceal')
  set conceallevel=2
  " set concealcursor=niv "The concealcursor enter in conflict with VimWiki Plugin.
endif"

let g:neosnippet#snippets_directory='~/.linux/vim/vim/plugged/neosnippet-snippets/neosnippets'

" Vim Clang Format (Configuration)

let g:clang_format#command = "/usr/bin/clang-format" "Inform where Clang Format executable is.
let g:clang_format#code_style = "google" "Inform the code style to be used.
" let g:clang_format#detect_style_file = 1 "vim-clang-format automatically detects the style file like .clang-format
let g:clang_format#style_options = {
      \"AccessModifierOffset" : "-4",
      \"AlignAfterOpenBracket" : "DontAlign",
      \"AllowShortFunctionsOnASingleLine" : "None",
      \"AllowShortIfStatementsOnASingleLine" : "false",
      \"AllowShortLoopsOnASingleLine" : "false",
      \"BreakBeforeBraces" : "Allman",
      \"BreakConstructorInitializersBeforeComma" : "true",
      \"ColumnLimit" : "150",
      \"ConstructorInitializerAllOnOneLineOrOnePerLine" : "false",
      \"IndentCaseLabels" : "false",
      \"IndentWidth" : "4",
      \"MacroBlockBegin" : "'DEFINE_ENUM'",
      \"MacroBlockEnd" : "'END_ENUM'",
      \"NamespaceIndentation" : "All",
      \"ObjCBlockIndentWidth" : "4",
      \"DerivePointerAlignment" : "false",
      \"PointerAlignment" : "Left",
      \"TabWidth" : "4"
   \}

" Original configuration.
    " \ "BreakBeforeBraces": "Allman",
    " \ "AllowShortFunctionsOnASingleLine" : "false",
    " \ "AllowShortIfStatementsOnASingleLine" : "false",
    " \ "AllowShortLoopsOnASingleLine" : "false",
    " \ "BreakConstructorInitializersBeforeComma" : "true",
    " \ "ColumnLimit" : "120",
    " \ "NamespaceIndentation" : "All"
    "
" " VimMarching (Configuration)
"
" let g:marching_clang_command = "/usr/bin/clang" "Inform where Clang executable is.
"
" let g:marching#clang_command#options = {
"   \ "cpp" : "-std=gnu++1y"
"   \}
"
" " Add include directory here that should be used intellisense is used
" let g:marching_include_paths = [
"       \ "/usr/local/include",
"       \ "~/leel/leel-third-party/boost",
"       \ "~/third-party/boost1.55",
"       \ "~/third-party/rapidjson/include"
"   \]
"
" let g:marching_enable_neocomplete = 1
"
" if !exists('g:neocomplete#force_omni_input_patterns')
"     let g:neocomplete#force_omni_input_patterns = {}
" endif
"
" let g:neocomplete#force_omni_input_patterns.cpp =
"     \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
"
" set updatetime=200
" imap <buffer> <C-x><C-o> <Plug>(marching_start_omni_complete)
" imap <buffer> <C-x><C-x><C-o> <Plug>(marching_force_start_omni_complete)

" " ALE configuration 
" let g:ale_completion_enabled = 1
" let g:airline#extensions#ale#enabled = 1
" nnoremap <silent><leader>agd :ALEGoToDefinition<cr> " Go to definition
" nnoremap <silent><leader>afr :ALEFindReferences<cr> " Finding references
" nnoremap <silent><leader>ass :ALESymbolSearch<cr> " Symbol search
" nnoremap <silent><leader>aif :ALEInfo<cr> " Display current lynt information
" nnoremap <silent><leader>agp <Plug>(ale_previous_wrap) " Go to previous error
" nnoremap <silent><leader>agn <Plug>(ale_next_wrap) " Go to previous error

" Syntastic (Configuration)
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_clang_check_config_file = ".syntastic_cpp_config"
" let g:syntastic_cpp_cpplint_exec = 'cpplint'
let g:syntastic_cpp_clang_check_exec = '/usr/bin/clang-check-3.8'
" let g:syntastic_cpp_cpplint_exec = ''
let g:syntastic_cpp_cppcheck_exec = '/usr/bin/cppcheck --std'
let g:syntastic_cpp_cpplint_exec = '~/.linux/cpplint/cpplint.py'
let g:syntastic_cpp_cpplint_args = '--filter=-whitespace/braces,-whitespace/parens $(ItemPath)'
let g:syntastic_mode_map = {
  \ "mode" : "passive",
        \ "active_filetypes" : [],
        \ "passive_filetypes" : []
        \}


" Doxigen ( Configuration )
" set spell spelllang=en_us
let g:load_doxygen_syntax=1
let g:DoxygenToolkit_briefTag_pre="@Desc "
let g:DoxygenToolkit_paramTag_pre="@Param "
let g:DoxygenToolkit_paramTag_post=" - \<enter>*"
let g:DoxygenToolkit_returnTag="@Return "
let g:DoxygenToolkit_blockHeader=""
let g:DoxygenToolkit_blockFooter=""
let g:DoxygenToolkit_authorName="Roger Santos"
let g:DoxygenToolkit_licenseTag="This is a part of the LeeL Systems products \nCopyright (C) 2016 LeeL Systems \nAll rights reserved."

"Doxygen Mapping
nnoremap <silent><leader>dgd :Dox<cr>
nnoremap <silent><leader>dgl gg :DoxLic<cr> " Document license.
nnoremap <silent><leader>dgs :set spell!<cr> " Toggle document spell check

" Ag (Configuration)
nnoremap <silent>\\ :Ag \(<c-r>=expand("<cword>")<cr>\)<cr>
" vnoremap <silent>\\ y :Ag \(<c-r>"<cr>\)

" tagbar (Configuration)
nnoremap <silent><leader>tgt :TagbarToggle<cr>
let g:tagbar_show_linenumbers=2
" let g:tagbar_left=1
" let g:tagbar_vertical=1
" let g:tagbar_autoclose=1
let tagbar_autofocus=1

" React JS:
let g:jsx_ext_required = 0 " Allow JSX in normal JS files
noremap <silent><leader>fj :call JsxBeautify()<cr>
noremap <silent><leader>fjs :call JsonBeautify()<cr>
noremap <silent><leader>fh :call HtmlBeautify()<cr>
noremap <silent><leader>fcss :call CSSBeautify()<cr>

" Pandoc:
let g:pandoc#modules#enabled = [
            \"command",
            \"formatting",
            \"metadata",
            \"keyboard" ,
            \"toc",
            \"completion",
            \]

let g:pandoc#formatting#mode = "h"
let g:pandoc#formatting#textwidth = "9999"

let g:pandoc#keyboard#enabled_submodules = [
            \"lists",
            \"references",
            \"styles",
            \"sections",
            \"links"]

let g:pandoc#spell#enabled = 0

let g:pandoc#syntax#codeblocks#embeds#langs = [
            \"python",
            \"cpp",
            \"c",
            \"cs",
            \"sql",
            \"xml",
            \]

" Markdown folding (Configuration)
" set nocompatible
" if has("autocmd")
"   filetype plugin indent on
" endif
set nofoldenable

" VimTextObjectUser  (Configuration)
call textobj#user#plugin('file', {
      \ 'file': {
      \ 'pattern': '\f\+', 'select': ['af', 'if']
      \ }
      \ })

" Identation Lines
let g:indentLine_fileType = ['c', 'cpp', 'h', 'hpp', 'js', 'jsx']

" Grammar checker
let g:grammarous#disabled_rules = {
			\ 'markdown' : ['DASH_RULE',
      \               'COMMA_PARENTHESIS_WHITESPACE',
      \              'SENTENCE_WHITESPACE',
      \              'EN_QUOTES',
      \              'WHITESPACE_RULE',
      \              'DOUBLE_PUNCTUATION',
      \              'POSSESSIVE_APOSTROPHE',
      \              'EN_CONTRACTION_SPELLING'],
			\ }


let g:grammarous#hooks = {}
function! g:grammarous#hooks.on_check(errs) abort
    nmap <buffer><C-n> <Plug>(grammarous-move-to-next-error)
    nmap <buffer><C-p> <Plug>(grammarous-move-to-previous-error)
    nmap <buffer><C-f> <Plug>(grammarous-fixit)
    nmap <buffer><C-a> <Plug>(grammarous-fixall)
    nmap <buffer><C-i> <Plug>(grammarous-remove-error)
endfunction

function! g:grammarous#hooks.on_reset(errs) abort
    nunmap <buffer><C-n>
    nunmap <buffer><C-p>
    nunmap <buffer><C-f>
    nunmap <buffer><C-a>
    nunmap <buffer><C-i>
endfunction

" FZF Configuration
let g:fzf_tags_command = 'ctags -R'
"" Fix Tags with spaces
command! -nargs=* -bang Tags call fzf#vim#tags(<q-args>, {'options': '--nth 1..5'}, <bang>0)
